{"url_object_id": "45af5cf8efb28987fbf48ee838c1d6f8", "title": "网络应用优化——时延与带宽", "url": "http://blog.jobbole.com/114523/", "create_date": "2018/11/22", "front_image_url": ["http://jbcdn2.b0.upaiyun.com/2016/04/149000d5c8b1bb08b8de6914ed749f28.gif"], "praise_nums": 2, "fav_nums": 3, "comment_nums": 1, "tags": "IT技术,带宽,时延", "content": "<div class=\"entry\">\r\n\r\n        \t\t\t<div class=\"textwidget\"></div>\n\t\t\r\n\t\t<div class=\"copyright-area\">原文出处： <a target=\"_blank\" href=\"https://www.evernote.com/client/snv?noteGuid=8fb7f419-9559-4202-bf57-a90af8a11a40&amp;noteKey=6dd95c4a64468bb1&amp;sn=https%3A%2F%2Fwww.evernote.com%2Fshard%2Fs652%2Fsh%2F8fb7f419-9559-4202-bf57-a90af8a11a40%2F6dd95c4a64468bb1&amp;title=%25E7%25BD%2591%25E7%25BB%259C%25E5%25BA%2594%25E7%2594%25A8%25E4%25BC%2598%25E5%258C%2596%25E2%2580%2594%25E2%2580%2594%25E6%2597%25B6%25E5%25BB%25B6%25E4%25B8%258E%25E5%25B8%25A6%25E5%25AE%25BD\">C.2 FrontEnd</a>   </div><h2>1. 用户感知的“速度”</h2>\n<div>用户体验能给网站带来更多的收益，因此人们也投入了更多精力去研究它。用户体验中，除了好的交互，精美的界面，用户感知的“速度”也是重要的一环。从网络角度来说，时延（latency）和带宽（bindwidth）是决定“速度”的重要环节。</div>\n<div>不同的应用对时延和带宽需求的侧重点往往不同：</div>\n<ul>\n<li>\n<div>网络游戏需要更低的时延。在一些对抗激烈的FPS、MOBA类的游戏中，单次数据传输的量并不大，因此带宽要求不高。但是若你顶着延迟和别人进行对抗，那么这局比赛可能已经输了一半；</div>\n</li>\n<li>\n<div>流媒体需要更高的带宽。高速带宽能让你观看高清电影，而延时就显得不那么重要，带来问题无非是在加载前等待一段时间罢了；</div>\n</li>\n<li>\n<div>视频聊天需要更低的时延。更低的时延意味着你能看到更流畅的实时画面，而不会掉帧。也许只有当你想要切换更高清晰度的时候才需要选择更高的带宽。</div>\n</li>\n<li>\n<div>浏览网页需要更低的时延。因为没人愿意在一个空白页面上花上几秒钟。更高的带宽常常无关紧要，除非你需要流量高分辨率的图片或者高清的视频。</div>\n</li>\n</ul>\n<h2>2. 时延与带宽</h2>\n<h3>2.1.糖果包装问题</h3>\n<div>某厂某天生产了N颗糖果，需要进行包装和验收。流水线一端的工人A负责包装，包装速度为N1颗/小时，另一端B的验收速度为N2颗/小时，两者通过协调达成某一相同的速度MIN（N1,N2）颗/小时。通过传送带传送到目的地。传送带长L米，速度为V 米/小时。从A开始计时到B验收完成，所需时间T为多少？</div>\n<div>答：T = L / V + N / MIN（N1,N2） + 1 / MIN（N1,N2）</div>\n<div>时间T反映了完成糖果包装并验收完成的总时间。如果糖果想象成可以需要传输的文件，那么就可以把糖果包装问题转换为一个简化的网络传输问题。</div>\n<div>假设服务器A向用户B发送一个大小为100KB的图片（假设HTTP连接已经建立），服务器上行带宽为1Mbps，用户所在下行带宽为100Mbps。已知端对端物理距离为2000 km，光信号在光纤中的传播速度是200000 km/s，求图片从A发出到B完整接收的时间T。代入公式可得： T = 2000/200 + 100 * 8 / 1 = 810 ms（最后一项太小可以被忽略）</div>\n<div>这个时间就是时延，具体的说是单向时延，即一个数据文件从传输到完整接收所花费的时间。</div>\n<h3>2.2.时延是什么</h3>\n<div>2.1中图片传输的时间叫做时延。时延并没有一个确切的定义。多数情况下是指单向时延，就是在数据通信过程中从A发送数据的第一个比特开始到B接受到数据的最后一个比特为结束产生的时间消耗，在某些场景下也指双向时延，即从网络请求发出到收到完整响应为结束经历的时间。时延常以毫秒为单位来衡量。数据包的大小、链路上传下行速率、通信距离、通信介质的种类、路由器的处理能力都会影响时延。常说的时延是下列这些不同时延的总和：</div>\n<ul>\n<li>\n<div>传播时延。信号在信道中传输的时间=通信距离/传播速度。</div>\n</li>\n<li>\n<div>处理时延。路由器路由、差错控制以及数据包头信息处理的时间。</div>\n</li>\n<li>\n<div>队列时延。数据包在队列中等待路由器处理的时间。</div>\n</li>\n<li>\n<div>发送时延。将数据包发送到信道中的时间=数据包大小/信道带宽。</div>\n</li>\n</ul>\n<div>减少时延往往比增加带宽需要更多的成本。2015年9月，Hibernia网络公司为了最大程度上确保纽约和伦敦的通信延时，部署了一条名为“Hibernia Express”的海底光缆，总计耗费达3亿美元。采用新光缆之后，纽约伦敦两地的延时为58.95ms，比现存的所有大西洋光缆少了5ms。这意味着节约的每1毫秒，价值近6千万美元。</div>\n<h3>2.3.带宽是什么</h3>\n<div>带宽是指数据通信最大的吞吐量，根据传输方向的不同可以分为上行带宽和下行带宽，常用Mbps来进行衡量。对于互联网上的用户，运营商（ISP）提供的带宽就是数据通信的最大吞吐量，并且上下行带宽往往不对称。如中国电信百兆宽带最大下行速度为100Mbps，而最大上行速度只有20Mbps。</div>\n<div>一般来说，核心网络（如海底光缆）的带宽往往可以达到几百Tbps。而终端用户实际可用的带宽，往往是网络服务所在服务器的上行带宽与用户下行带宽的最小值。</div>\n<div>若某一网站部署在上行带宽为1Mbps服务器上，那么即使访问者拥有100Mbps的下行带宽，用户仍然只能以1Mbps的速度下载网页上的内容。</div>\n<h3>2.4.联系与区别</h3>\n<div>对终端用户而言，延时可以理解为某一网络服务的响应速度，而带宽可以理解为上传下载文件的最大速度，而实际可用的带宽，往往又是由网络服务所在服务器的上行带宽与用户下行带宽的最小值所决定。</div>\n<div>以浏览网页为例子，若响应速度快，用户实际可用的带宽（见2.3节的定义）小，就可能导致页面上的图片以肉眼可见的速度一点点显示出来；若响应速度慢，用户实际可用的带宽大，就可能导致页面上的内容需要等待很久才能有显示，在此之前都是空白。但是当响应完成，会立即显示网页内容。</div>\n<div>有人说带宽和时延没有关系，这句话是有问题的。因为在2.2节中介绍了发送延时，它通常由服务器的上行带宽与用户下行带宽的最小值所决定。准确的说是，目前现实场景中大部分的时延不是由带宽决定，而往往是由传播距离、网络状况等所决定。</div>\n<h2>3.性能优化</h2>\n<div>了解了带宽和时延，那么就可以更好地理解网站性能优化背后的本质——减少延时，增加带宽。常见的性能优化的方式有合并请求和建立内容分发网络（CDN）：</div>\n<div>合并请求。从优化角度来说，合并请求就是在减少总时延。一个100KB的文件和 10个10KB大小的文件大小相同。若D为传播时延，T为发送10KB文件的发送时延，那么一次发送100KB文件的时延为 D + 10T，而发送10次单个10KB文件的延时为 10D+10T。相同情况下，请求次数越少，总时延就越少。</div>\n<div>建立内容分发网络。内容分发网络通过将网站内容服务器分布在靠近用户的位置，从而使用户就近获取所需内容，减少传播延时，进而显著提升网站的响应速度。</div>\n<div>举例来说，高质量的视频网站必须租用高速的上行带宽，确保能够承担大规模的视频流量，因为没人愿意等待几分钟缓冲一个流媒体视频。同时它也要在各地建立大规模的内容分发网络（CDN）来降低视频内容的传播延迟，这样才不会让用户等待很久才能获得网站的响应。</div>\n<h2>4.总结</h2>\n<div>本文网络应用优化中最重要的两个目标：时延与带宽。通过定义并区分两者的关系，并引申出网络服务优化的几种基本方法。和所有的教程一样，本文不可能涵盖到网络优化的所有细节，但是若能对你有所启发，那就是再好不过了。</div>\n<h2>5.参考链接</h2>\n<div>\n<div><a href=\"https://hpbn.co/primer-on-latency-and-bandwidth/\" target=\"_blank\">Primer on Latency and Bandwidth</a></div>\n<div><a href=\"https://www.highspeedinternet.com/resources/bandwidth-vs-latency-what-is-the-difference/\" target=\"_blank\">Bandwidth vs. Latency: What is the Difference?</a></div>\n</div>\n\r\n        \r\n        \r\n        \n    <div class=\"post-adds\">\n        <span data-post-id=\"114523\" class=\" btn-bluet-bigger href-style vote-post-up   register-user-only \"><i class=\"fa  fa-thumbs-o-up\"></i> <h10 id=\"114523votetotal\">2</h10> 赞</span>\n        <span data-book-type=\"1\" data-site-id=\"2\" data-item-id=\"114523\" data-item-type=\"1\" class=\" btn-bluet-bigger href-style bookmark-btn  register-user-only \"><i class=\"fa fa-bookmark-o  \"></i> 3 收藏</span>\n\n                    <a href=\"#article-comment\"><span class=\"btn-bluet-bigger href-style hide-on-480\"><i class=\"fa fa-comments-o\"></i> 1 评论</span></a>\n        \n        \n        \n        <!-- JiaThis Button BEGIN -->\n        <div class=\"jiathis_style_24x24\" style=\"display: inline-flex; position: relative; margin: 0; clear: both;float: right;\">\n            <a class=\"jiathis_button_tsina\"></a>\n            <a class=\"jiathis_button_weixin\"></a>\n            <a class=\"jiathis_button_qzone\"></a>\n            <a class=\"jiathis_button_fb hide-on-480\"></a>\n            <a href=\"http://www.jiathis.com/share?uid=1745061\" class=\"jiathis jiathis_txt jiathis_separator jtico jtico_jiathis\" target=\"_blank\"></a>\n        </div>\n\n    </div>\n\n\n\n\r\n        <!-- BEGIN #author-bio -->\r\n\r\n\r\n<!-- END #author-bio -->\r\n\t</div>", "front_image_path": "full/e8f8b7fe8c56ba964bd5eb1fadab627b06618a67.jpg"}
{"url_object_id": "c6b94d24afe2779abf58694dfb05b794", "title": "程序员神器 StackOverflow 10 岁了，它长大后想成为什么？", "url": "http://blog.jobbole.com/114499/", "create_date": "2018/11/20", "front_image_url": ["http://jbcdn2.b0.upaiyun.com/2016/03/6dd085bf97f82f786b71b4fbcdb37e88.jpg"], "praise_nums": 4, "fav_nums": 2, "comment_nums": 1, "tags": "IT技术,StackOverflow", "content": "<div class=\"entry\">\r\n\r\n        \t\t\t<div class=\"textwidget\"></div>\n\t\t\r\n\t\t<div class=\"copyright-area\">本文由 <a href=\"http://blog.jobbole.com\">伯乐在线</a> - <a href=\"http://www.jobbole.com/members/wx1905494155\">一汀</a> 翻译。未经许可，禁止转载！<br>英文出处：<a target=\"_blank\" href=\"https://blog.codinghorror.com/what-does-stack-overflow-want-to-be-when-it-grows-up/\">Jeff Atwood</a>。欢迎加入<a target=\"_blank\" href=\"https://github.com/jobbole/translation-project\">翻译组</a>。</div><p>【伯乐在线导读】：今年 9 月，程序员必备神器之一的 Stack Overflow 正式成立 10 周年了。截至目前为止，SO 用户量高达 930 万，也许你经常在 SO 上找解决方案。但你可能还不真正了解 SO。来看看 SO 创始人 Jeff Atwood 是怎么说的。</p>\n<hr>\n<p> </p>\n<p>现实生活中常常有人问我，我的工作是什么，对此我有一个 15 秒的回答：</p>\n<blockquote><p>我们创建了一个类似维基百科的网站，程序员们可以在上面发表或者解答问题。网站的名字叫 <a href=\"https://stackoverflow.com/\">Stack Overflow</a>。</p></blockquote>\n<p>截至 2018 年 9 月，Joel Spolsky 与我共同创建的 Stack Overflow 已经走过了 10 个年头。从 2012 年开始我就在做其他的工作了，但是能让人们在我过世之后还能想起我的东西，那肯定还是我的老伙伴 Stack Overflow。</p>\n<p>这里我好像应该滔滔不绝地说 Stack Overflow 有多么优秀，而我作为创始人是有多么伟大。</p>\n<p><img src=\"http://www.poorlydrawnlines.com/wp-content/uploads/2011/09/bragging.jpg\" alt=\"\"></p>\n<p>但I这些我都不在乎。</p>\n<p>我真正在乎的是，Stack Overflow 对程序员们是不是有帮助。对此，让我们看看如今最牛叉的开发者之一，我的偶像 John Carmack 是怎么评价的。</p>\n<blockquote>\n<p style=\"text-align: left;\"><img src=\"https://d2mxuefqeaa7sj.cloudfront.net/s_C8591C5627C21D2C099CE3885D4246D7CFCC30D73E98C53D54E39F0983BC11D8_1541195322340_image.png\" alt=\"Stack Overflow为提升开发者的效率事业差不多贡献了好几亿美元\"> 在为提升开发者的效率方面，Stack Overflow 可能贡献了好几十亿美元</p>\n</blockquote>\n<p>说实话，2013 年 9 月 17 日是很美好的一天。我读到这条推的时候吓了一跳，不光是因为我经常用 Carl Sagan 的方式读 Billions 这个词。我在 Twitter 每隔几天就会读到一些残酷无尽的人间疾苦，以及人们在网络上的互相叫骂。与此相反，那一天是我感觉到的只有喜悦。这也提醒了我，我该查查 Twitter，看看如今谁还对网络抱有不同的理解。</p>\n<p>Stack Overflow 有着如此多用户，也帮助了一个时代的开发者，对此我感到既荣幸又谦卑。但是，实现这一成就的并不是我。</p>\n<ul>\n<li>是你们，对 Stack Overflow 贡献了经过深入研究后想到的提问；</li>\n</ul>\n<ul>\n<li>是你们，对 Stack Overflow 贡献出了简洁而清晰的答案；</li>\n</ul>\n<ul>\n<li>是你们，编辑了 Stack Overflow 的提问或答案，并使其变得更好；</li>\n</ul>\n<p>世界各地开发者们所贡献的那些大大小小的提问与回答，把 Stack Overflow 变成了一个在开发领域能与维基百科抗衡的创意共享知识库。这实在是…非常的不可思议。</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2018/10/stack-overflow-homepage-oct-2018.png\" alt=\"\"></p>\n<p>不过成功的故事都很无聊。这个世界上有很多人，本身运气好，但还时不时的告诉别人是自己的努力以及喝活力汽水换来了成功。我觉得失败的故事更有教育意义，在建立业务与规划未来时，我把自己想象成深渊专家，并开始一场比赛。这是我自己做事的习惯。</p>\n<p><a href=\"https://www.reddit.com/r/comics/comments/8a4c2h/abyss_oc/\"><img class=\"aligncenter\" src=\"https://blog.codinghorror.com/content/images/2018/10/abyss-oc.jpg\" alt=\"abyss-oc\"></a></p>\n<p style=\"text-align: center;\"><em>当你在凝视深渊的时候，深渊也正在凝视着你 – Friedrich Nietzsche</em></p>\n<p>由此，我现在要与耀眼的深渊对视，预测一下Stack Overflow未来十年会遇到的挑战。这之前，我要先澄清以下事实。</p>\n<p><strong>1、从 2012 年 2 月开始，我就没有再为 Stack Overflow 做事了，也没有对其运营有过任何建议。</strong>你问我对如何运作Stack Overflow 竟然能没有建议？额，那你可能不认识我。你问我难道我不会时不时给员工发邮件告诉他们我的想法？我也许会吧，但是我为数不多的归档邮件可以证明，这个事情很少发生。</p>\n<p><strong>2、Stack 有着优秀的员工</strong>，他们中的大多数（包括我离开之前的 Stack Overflow 社区成员）都能对我们的使命给出更好的，不像我那样胡思乱想的阐述。我会用生命信任他们吗？不会。但是我会用 Joel 的生命信任他们！</p>\n<p><strong>3、Stack Overflow并不属于我或者 Joel，或者其他一些优秀的开发者。</strong>Stack Overflow 的运作靠的是世界各地日复一日做开发的人们，就像你或我一样。我觉得 Stack Overflow 就像个家长，它的目标是让孩子们最终能离开家长身边，成为可以独当一面的大人。</p>\n<p>4、作为 Stack Overflow 的创始人，我在社区成立的最初四年里，花了非常多的时间参与制定规则与规范。你现在阅读的是我所<a href=\"https://blog.codinghorror.com/strong-opinions-weakly-held/\">强观点，弱坚持</a>。这只是我的一些想法，我也希望自己的预测是准确的，但是这并不意味着我可以预测未来，或者我有资格去预测未来。不过我并不会以自己是否具有资格而不去做一些事情。</p>\n<h2>Stack Overflow首先是一个 wiki</h2>\n<p>Stack Overflow不仅是个论坛，它跟维基百科有很多相似之处。我们衡量问题和答案是否有意义的方式，不是看那些问题和答案对特定几个人的帮助，而是看随着时间的推移，这些问题和答案能不能帮助到越来越多的人。我从 <a href=\"https://blog.codinghorror.com/stack-overflow-none-of-us-is-as-dumb-as-all-of-us/\">2008 年 Stack Overflow 上线</a>后就在强调这个关系。来看看下面谁的地位最高。</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2018/10/stack-overflow-venn-diagram.png\" alt=\"\"></p>\n<p>为了强调这一核心价值，Stack Overflow添加了一个简洁的功能。那就是在用户资料里会显示，你所贡献的问题与回答帮助到了多少人。</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2018/10/stackoverflow-people-reached-profile-stat-1.png\" alt=\"\"></p>\n<p>这些问答内容到底服务于谁？回答问题为何有如此严格的审核过程？对于 Stack Overflow 最常见的抱怨通常来自于对前面这两个问题的误解。</p>\n<blockquote><p><img src=\"https://d2mxuefqeaa7sj.cloudfront.net/s_C8591C5627C21D2C099CE3885D4246D7CFCC30D73E98C53D54E39F0983BC11D8_1541370256957_image.png\" alt=\"我希望更多的人能明白，Stack Overflow并不是一个“回答我的问题”的地方，它是“让我们合作建立一个对未来的开发者们有益的地方”。也许Stack Overflow应该更加努力去帮助用户理解这件事。\"> 我希望更多的人能明白，Stack Overflow并不是一个“回答我的问题”的地方，它是“让我们合作建立一个对未来的开发者们有益的地方”。也许 Stack Overflow 应该更加努力去帮助用户理解这件事。</p></blockquote>\n<p>如今很多用户，甚至泡在 Hacker News 上的技术圈网友，都不知道 Stack Overflow 上有个功能，那就是每一个问题都是可以修改的，即使是没有登录的匿名用户也可以修改。对此我深表惊讶。这个功能不奇怪，对吧，因为 Stack Overflow 就是一种维基百科，这也是维基百科的运行模式，任何人都可以修改任何内容。不信的话，现在就去试试吧，找一个你认为可以提高的问题或者回答，点击“改善这个回答（improve this answer）”或者“改善这个问题（improve this question）”，然后写下你的改良版。</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2018/10/stack-overflow-edit-question.png\" alt=\"\"></p>\n<p>Stack Overflow 有很多功能（甚至也包括我自己在 2012 年之前的一些所作所为）都容易导致用户误解其核心价值。理论上，“如今每一个开发者都听过，用过以及了解 Stack Overflow”，但我觉得这个假设不准确。毕竟每时每刻都有新的开发者诞生。说得更复杂一点，Stack Overflow 的使用模式有三种，从大到小，以倒金字塔的形式排列如下：</p>\n<p><strong>1、我在需要的时候去搜索答案</strong></p>\n<p>用户直接上网搜索，搜索引擎会直接显示出 Stack Overflow 中的高票答案。出现在搜索引擎第一页，这也是Stack Overflow的主要目标。如Stack Overflow正常运行，98%的开发者在他们的整个职业生涯中，不需要主动提出或者回答问题。只要通过网络搜索就可以找Stack Overflow上到他们需要的结果。这是个好事，非常好的事。</p>\n<p><strong>2、我遇到很困难的问题时会参与Stack Overflow的讨论，因为单纯的搜索找不到我想要的答案</strong></p>\n<p>只在遇到难以解决的困难时，参与Stack Overflow的讨论，这很合理。然而，我觉得这个阶层的用户最容易感觉到Stack Overflow不是那么容易使用，因为这类用户可能对Stack Overflow很熟悉，但是并不清楚发布问题的流程。并且在他们急切想寻找答案的时候，他们没有时间或心思去应对Stack Overflow对于问题背景、格式、描述以及引用要求。</p>\n<p><strong>3、为了自己的职业发展，我主动参与Stack Overflow的问题讨论</strong></p>\n<p>这个阶层的用户很有经验，他们贡献了很多答案，也了解什么样的问题是好问题，是他们感兴趣、愿意回答的问题。他们不经常提问，因为他们知道如何去全面搜索他们想要的答案。但是他们一旦提问，那一定是个示范性的好问题。</p>\n<p>（理论上这里还有个第四阶层用户，他们无私的贡献了很多提问与回答，目的只是为了推动软件开发行业的发展，造福于新一代的开发者们。但是我们没空提这些大神，你们只会让我们显得更加平凡，所以我们就此打住吧）</p>\n<p>第一阶层的用户在社区里开心地逛了好几年，却在变为第二阶层用户时，一下子有了不开心的用户体验。对此我一点儿也不惊讶。我认为解决这个问题最主要的方式，就是改变并提高提问页面的用户体验。另外值得注意的一点是，用户在提出了某个问题后，可能收到关于问题信息不足的负面反馈，但是他们也许并不知道，你的问题应该是“有益于其他用户而并不只是你自己”。</p>\n<p>Stack Overflow采用了维基百科的模式，也使其自身受到了很多限制。即使用户在提问前就知道这些，很多时候到底什么是“有用的信息”也很难判断。同理，很多时候我们也不确定到底什么样的话题，人群或者地点需要一份维基百科。<a href=\"https://en.wikipedia.org/wiki/Henrietta_Lacks\">Henrietta Lacks</a> 有自己的维基百科页面，这毫无争议，但是他住在奥哈马市的表兄 Dave，那个提出了一个关于 PHP 5.6 的奇怪问题的人，是不是该被写入维基百科呢？</p>\n<h2>随着时间的推移，重复内容像地雷一样遍地都是</h2>\n<p>这事我很早就预料到了。老实说，我有点庆幸自己在 2012 年离开了 Stack Overflow，这样我就不用去处理这个难以置信的技术性难题：重复性内容。在我听到的关于 Stack Overflow 的所有抱怨里，重复内容是我觉得最有共鸣的。</p>\n<p>如果你接受Stack Overflow是个类似于维基百科系统这一前提，那同理你显然不能接受，在维基百科中，对于意大利有五个不同的词条。Stack Overflow不允许对于同一个技术问题有重复的提问。我们确实有很多避免重复问题的功能，比如输入问题时的同步搜索，以及提交问题前，你会看到一个很明显的，鼓励用户先去搜索相关问题的搜索框。</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2018/10/stack-overflow-how-to-ask.jpg\" alt=\"\"></p>\n<p>… 如何查找并判断重复内容是个非常有难度的问题，即使是Google这样的公司，有着名副其实世界最聪明的工程师团队，专攻了20年也没有解决这个问题。</p>\n<p>当你在一个不允许重复问题的网站中提问时，系统去重的难度取决于总问题数量，处理一百万的问题总量的去重与一千万甚至一亿相比，是非常不同的。系统处理问题去重的难度，会从不太难处理变为最终的完全无法处理。比如你提出了一个与艺术类相关的问题，那么系统需要根据你的提问内容，在不胜枚举的已有问题中进行筛选，以确保没有看起来相似的提问。</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2018/10/stackoverflow-asking-duplicate-question.png\" alt=\"\"></p>\n<p>等会儿，还有个更难的问题！</p>\n<ul>\n<li><a href=\"https://stackoverflow.blog/2010/11/16/dr-strangedupe-or-how-i-learned-to-stop-worrying-and-love-duplication/\">相似问题中有一点内容变化也是可以的</a>，因为十个不同的人在提出同一个问题时，完全可能使用毫不相关的词语来形容这个问题。我知道这听起来很疯狂，但是相信我：人类极其擅长做这样的事。我们希望保留这些重复的问题，并且让他们都指向同一个主问题，以便于用户更好的搜索他们需要的内容，即使这些用户使用了那些平常不太会被用到的词语去描述问题。</li>\n</ul>\n<ul>\n<li>如何判断你提出的问题是不是重复，这是个不小的挑战。多少词语的重叠才能决定一个问题是不是与另一个重复？谁来决定？不同人有不同理论。这是个以人类语言为标准的解析，然后人类吧……不可预知。这个系统无法做到让所有人满意，去重的缺陷会一直存在于系统之中。</li>\n</ul>\n<p>我对于越来越严重的重复问题并没有一个好的解决方案。但是我想指出，早期在 <a href=\"https://stackexchange.com/sites#\">Stack Exchange</a> 有很多先例，它们把网站分为“初级”和“高级”区域，不同区域的规则不同。我们在别的地方也能找到类似的例子，比如 Math 和 MathOverflow，English 和 English Learners， Unix 和 Ubuntu，也许是时候搞一个以初级用户为主的 Stack Overflow了，在那里我们可以允许多一些重复，少一些规则。</p>\n<h2>Stack Overflow是个可以同行评审的竞争性系统</h2>\n<p>Stack Overflow确实是个相当明确的竞争性系统，它的一大标志就是<a href=\"http://wiki.c2.com/?ThereIsMoreThanOneWayToDoIt\">“总会有更好的解决办法”</a>。根据我的多年观察，激励开发者最有效的方式就是…巧妙地暗示出别人的解决方案也许比你的更好。</p>\n<blockquote><p><img src=\"https://blog.codinghorror.com/content/images/2018/10/geek-hero-motivating-programmers.png\" alt=\"- 你好Randall。医生说你能听到我说话，虽然你看起来像植物人。我是来告诉你，别着急慢慢康复。因为Ross接替了你的工作，并且做的非常好。他甚至找到了你代码里的瓶颈，还说他改过的代码变快了两倍。 - 这不可能！！！！！我现在就回办公室！\"> – 你好Randall。医生说你能听到我说话，虽然你看起来像植物人。我是来告诉你，别着急慢慢康复。因为Ross接替了你的工作，并且做的非常好。他甚至找到了你代码里的瓶颈，还说他改过的代码变快了两倍。</p>\n<p>– 这不可能！！！！！我现在就回办公室！</p></blockquote>\n<p>Stack Overflow的竞争性质体现在了它的公开声望系统上，就是<a href=\"https://blog.codinghorror.com/for-a-bit-of-colored-ribbon/\">用户名旁边那个拥有神奇力量的数字</a>。所有的声望值都来源于其他用户，而不是所谓的系统。</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2018/10/stack-overflow-top-rep-by-year.png\" alt=\"\"></p>\n<p>每当你提出问题或者提交回答时，你的问题或回答都可以被其他用户指指点点，他们可以编辑、标记、关闭、打开、顶、踩或者收起。这样做的目的是让 Stack Overflow 成为一个同行评审和友好竞争的系统，就像在公司里，你的代码被你从没见过的另一个部门的人来评审。有人以友好的方式去质疑你所提问题的提论，也是完全合理的，比如，<a href=\"https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags\">你真的想用这个正则表达式去匹配 HTML 吗</a>？</p>\n<p>我完全清楚这种竞争性质的同行评审系统，并不适合每一个人。Stack Overflow 采用维基百科的模式，导致它存在不能接受重复内容这样的限制。那么根据你的情况与背景，同行评审时，你收到的评价可能会让你觉得不舒服。</p>\n<p>我听部分用户反应，在 Stack Overflow 提问的过程中会感觉到焦虑。对我来说，在 Stack Overflow上提问，应该感受到一种 ”我要展示出我最好的一面“ 的正常焦虑：</p>\n<ul>\n<li>在你的同事面前演讲的焦虑</li>\n<li>考试要取得好成绩的焦虑</li>\n<li>开始新工作，与你尊敬的优秀同事们一起工作的焦虑</li>\n<li>第一天去学校报到，即将见到新同学的焦虑</li>\n</ul>\n<p>至于那种完全不会感到焦虑的地方，我唯一能想到的就是，从事了很久的工作，已经不再关注与工作本身，因此也没有那种担心有一天就会丢了工作的焦虑。这样怎么会好呢？所以说我不喜欢零焦虑的系统。</p>\n<p>也许你不喜欢竞争。那么能不能有个少量竞争模式的问答系统呢？一个没有投支持或者反对票功能的系统，这样无论发表什么内容都不会感觉焦虑。这就像是一个全是你的支持者的网络，大家都相信你，希望你成功。这当然也是可以的。我认为应该有类似这样的网站，用户可以根据自己的需求与目标来选择适合自己的体验。那么 Stack 应该建立一个这样模式的社区吗？这样的社区已经有了吗？这是个开放题。也请随意在留言区发表你的看法。</p>\n<h2>Stack Overflow是为了日常开发者而设计的</h2>\n<p>Stack Overflow的目标用户到底是谁，这也是经常容易被混淆的一点。这个回答很直观，而且从从未改变过：</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2018/10/stackoverflow-for-business-description.png\" alt=\"\"></p>\n<p>一个为专业和热情的程序员而存在的问答平台。这是指：</p>\n<blockquote><p>当前正在从事程序开发职业的人，或者如果愿意就能立即胜任程序开发工作的人。</p></blockquote>\n<p>如果你觉得好奇，这个定义的一部分是公开的商业决策。为了盈利，你的用户群体必须要有一部分拿着开发者薪水的人，或者在找开发者的工作的人。整个 Stack Overflow 社区也许有着知识共享的标签，但是它并不是个非营利组织。我们的出发点是可持续经营，这也是为什么我们在 Stack Overflow 上线一年之后，就成立 <a href=\"https://blog.codinghorror.com/stack-overflow-careers-amplifying-your-awesome/\">Stack Overflow Careers 招聘平台</a>的原因，回顾一下，成立的确实有点过早了。为了实现比 2009 好很多的集成化用户体验，招聘平台被归入了 Stack Overflow，放在了 <a href=\"https://stackoverflow.com/jobs\">stackoverflow.com/jobs</a>下面。</p>\n<p>用户的选择定位并不是说要排斥非开发者，但是 Stack Overflow 确实是一个有着严格同行评审，对已经在从事相关行业的人来说非常优秀的功能，但同时也是对于学生或者初学者来说很不友好的功能。这也是为什么，我每次在推特上，看到有人推荐学生去 Stack Overflow 找答案时，我会小心翼翼的建议不要这样。对于开发领域的新手或者学生来说，他们需要的，与 Stack Overflow 所提供的是完全相反的。他们需要的是：</p>\n<ul>\n<li>一对一的指导</li>\n<li>实时屏幕共享协作</li>\n<li>实时语音</li>\n<li>理论背景知识课程</li>\n<li>初学者练习</li>\n<li>一个练习与实验的场所</li>\n</ul>\n<p>这些都是对初学者来说，很好很合理的事情，但是 Stack Overflow 一个也不做。你可以通过 Stack Overflow 来从头学习如何编程吗？理论上你可以通过任何软件做任何事情，你甚至可以通过 Reddit 与人进行日常交流，如果你是受虐狂的话。但是答案还是肯定的，理论上你可以通过 Stack Overflow 学习如何编程，如果你是喜欢竞争模式（声望、被关闭、被踩）的神童，也完全能接受要去帮助别人而不只是自己学习知识这一观点。但是我强烈不推荐这样做。对初学者来说，除了 Stack Overflow 外还有<a href=\"https://blog.codinghorror.com/heres-the-programming-game-you-never-asked-for/\">很多更好更合适的平台</a>。那么 Stack Overflow 能不能成为一个适合新手和学生的平台呢？我不清楚，我也不能决定。</p>\n<p>这些就是我要说的。我们可以不再与深渊对视。</p>\n<p>我希望我的观点对 Stack Overflow 不会有什么负面影响。总的来说，我认为目前的 Stack Overflow 很强大。但是，无论是 <a href=\"https://stackoverflow.blog/2008/11/25/stack-overflow-is-you/\">2008 年</a>还是2018 年，我怎么想有关系吗？</p>\n<blockquote><p>Stack Overflow 是你们的。 Stack Overflow 将信念赌在了这一点：信任你的同行。Stack Overflow 的成长离不开那些积极参与社区讨论的开发者们。是你们让我相信开发者社区是最好的学习与成长的地方。是你们让我收获了如此多的对于 Stack Overflow 的赞誉。这不是我的功劳，而是你们的。 很久之前我在 Code Horror 上就知道了合作的力量是多么强大。目前我们的社区已经达到我今生难以企及的高度。我唯一能要求的，或者是我们能要求的，就是大家互相帮助互相成长。 如果有人认可了你的付出，那么你值得为此感到骄傲。</p></blockquote>\n<p>开发者社区的力量能够创造以及终结 Stack Overflow。Stack Overflow 长大了会成为什么？它的未来将由我们共同创造。</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2018/10/stackoverflow-none-of-us-is-as-dumb-as-all-of-us.jpg\" alt=\"\"></p>\n<p>PS：Stack Overflow 十周年快乐！</p>\n\r\n        \r\n        \r\n        \n    <div class=\"post-adds\">\n        <span data-post-id=\"114499\" class=\" btn-bluet-bigger href-style vote-post-up   register-user-only \"><i class=\"fa  fa-thumbs-o-up\"></i> <h10 id=\"114499votetotal\">4</h10> 赞</span>\n        <span data-book-type=\"1\" data-site-id=\"2\" data-item-id=\"114499\" data-item-type=\"1\" class=\" btn-bluet-bigger href-style bookmark-btn  register-user-only \"><i class=\"fa fa-bookmark-o  \"></i> 2 收藏</span>\n\n                    <a href=\"#article-comment\"><span class=\"btn-bluet-bigger href-style hide-on-480\"><i class=\"fa fa-comments-o\"></i> 1 评论</span></a>\n        \n        \n        \n        <!-- JiaThis Button BEGIN -->\n        <div class=\"jiathis_style_24x24\" style=\"display: inline-flex; position: relative; margin: 0; clear: both;float: right;\">\n            <a class=\"jiathis_button_tsina\"></a>\n            <a class=\"jiathis_button_weixin\"></a>\n            <a class=\"jiathis_button_qzone\"></a>\n            <a class=\"jiathis_button_fb hide-on-480\"></a>\n            <a href=\"http://www.jiathis.com/share?uid=1745061\" class=\"jiathis jiathis_txt jiathis_separator jtico jtico_jiathis\" target=\"_blank\"></a>\n        </div>\n\n    </div>\n\n\n\n\r\n        <!-- BEGIN #author-bio -->\r\n\r\n<div id=\"author-bio\">\r\n\t\r\n\t<h3 class=\"widget-title\">\r\n\t关于作者：<a target=\"_blank\" href=\"http://www.jobbole.com/members/wx1905494155\">一汀</a>\r\n\t</h3>\r\n\t<div class=\"alignleft\">\r\n\t\t<a target=\"_blank\" href=\"http://www.jobbole.com/members/wx1905494155\">\r\n\t\t\t<img src=\"http://jbcdn2.b0.upaiyun.com/2015/04/8fbdaaa5ea6d3b49c8c1c825aafeb5d9.png\">\r\n\t\t</a>\r\n\t</div>\r\n\r\n    <div class=\"author-bio-info\">\r\n\r\n        <span class=\"author-bio-info-block\">\r\n            简介还没来得及写 :）        </span>\r\n        <span class=\"author-bio-info-block\">\r\n            <a href=\"http://www.jobbole.com/members/wx1905494155\" target=\"_blank\"><i class=\"fa fa-user\"></i> 个人主页</a> ·\r\n            <a href=\"http://blog.jobbole.com/author/wx1905494155/\" target=\"_blank\"><i class=\"fa fa-file-text-o\"></i> 我的文章</a>\r\n\r\n             · <a title=\"声望值\" target=\"_blank\" href=\"http://www.jobbole.com/members/wx1905494155/reputation/\"><i class=\"fa fa-graduation-cap\"></i> 3</a>        </span>\r\n    </div>\r\n\t<div class=\"clear\"></div>\r\n</div>\r\n\r\n<!-- END #author-bio -->\r\n\t</div>", "front_image_path": "full/217248f366b3ffdce01fd5df8546529db6cbed0f.jpg"}
{"url_object_id": "d8d38d06c5c1b720e6f010af156bb849", "title": "计算机科学自学指南", "url": "http://blog.jobbole.com/114573/", "create_date": "2018/12/22", "front_image_url": ["https://teachyourselfcs.com/sicp.jpg"], "praise_nums": 2, "fav_nums": 14, "comment_nums": 1, "tags": "IT技术", "content": "<div class=\"entry\">\r\n\r\n        \t\t\t<div class=\"textwidget\"></div>\n\t\t\r\n\t\t<div class=\"copyright-area\">本文由 <a href=\"http://blog.jobbole.com\">伯乐在线</a> - <a href=\"http://www.jobbole.com/members/pumpkin0227\">pumpkin0227</a> 翻译，<a href=\"http://www.jobbole.com/members/hanxiaomax\">艾凌风</a> 校稿。未经许可，禁止转载！<br>英文出处：<a target=\"_blank\" href=\"https://teachyourselfcs.com/\">Teach Yourself Computer Science</a>。欢迎加入<a target=\"_blank\" href=\"https://github.com/jobbole/translation-project\">翻译组</a>。</div><p>如果你是一名自学工程师或者是一名软件集训课程毕业的学生，有些计算机科学基础课程是你必须要补齐的。幸好，你通过互联网就能获得世界顶级的CS（计算机科学）课程。</p>\n<p>其实网上有很多学习资源但它们良莠不齐，你需要不是什么“200+免费在线课程”列表而是如下问题的答案：</p>\n<blockquote><p>你应该学习哪门课程？为什么？</p>\n<p>每门课程最好的书籍或者视频，讲座是什么？</p></blockquote>\n<p>我写这篇文章的目的就是尝试对于这些问题给出的明确答案：</p>\n<p>使用建议的书籍或者视频讲座来学习以下的九门科目，最好是书籍和讲座都仔细的研究一下，可以不严格按照列出的顺序来。每一门科目都需要花上100-200小时来研读，然后在你的职业生涯中对于最热爱的方向进行反复重温。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center;\">主题</th>\n<th style=\"text-align: center;\">为什么学习它</th>\n<th style=\"text-align: center;\">推荐书籍</th>\n<th style=\"text-align: center;\">推荐视频</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center;\">编程</td>\n<td style=\"text-align: center;\">别做那些连“递归”是什么都搞不懂的程序员</td>\n<td style=\"text-align: center;\">\n<div class=\"title\">《<a href=\"https://book.douban.com/subject/1148282/\" target=\"_blank\">计算机程序的构造和解释</a>》</div>\n</td>\n<td style=\"text-align: center;\">Programs Brian Harvey’s Berkeley CS 61A</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">计算机体系结构</td>\n<td style=\"text-align: center;\">如果你基础薄弱，不知道计算机是如何运行的，那些你学会的所谓“高层”技能不过是空中楼阁</td>\n<td style=\"text-align: center;\">《<a href=\"https://book.douban.com/subject/2110638/\" target=\"_blank\">计算机组成与设计硬件/软件接口</a>》</td>\n<td style=\"text-align: center;\">Berkeley CS 61C</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">算法和数据结构</td>\n<td style=\"text-align: center;\">如果你不能很好的使用随处可见的数据结构（例如栈、队列、树和图），你是无法解决复杂问题的</td>\n<td style=\"text-align: center;\">\n<div class=\"title\">《<a href=\"https://book.douban.com/subject/4048566/\" target=\"_blank\">算法设计手册</a>》</div>\n</td>\n<td style=\"text-align: center;\">Steven Skiena’s lectures</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">计算机数学</td>\n<td style=\"text-align: center;\">计算机科学实际上是应用数学的一个分支，学好数学让你更具竞争力</td>\n<td style=\"text-align: center;\">《Mathematics for Computer Science》</td>\n<td style=\"text-align: center;\">Tom Leighton’s MIT 6.042J</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">操作系统</td>\n<td style=\"text-align: center;\">你编写的大部分代码是通过操作系统运行的，所以你需要知道它们是如何交互的</td>\n<td style=\"text-align: center;\">《<a href=\"http://pages.cs.wisc.edu/~remzi/OSTEP/\">Operating Systems: Three Easy Pieces</a>》</td>\n<td style=\"text-align: center;\">Berkeley CS 162</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">计算机网络</td>\n<td style=\"text-align: center;\">互联网是个了不起的发明，只有理解它的原理，才能发挥它的威力</td>\n<td style=\"text-align: center;\">\n<div class=\"post\">《<a href=\"https://book.douban.com/subject/1391207/\" target=\"_blank\">计算机网络（第4版）</a>》</div>\n</td>\n<td style=\"text-align: center;\">Stanford CS 144</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">数据库</td>\n<td style=\"text-align: center;\">对于很多程序来说，数据是其核心，但是很少有人真正理解数据库系统是如何运行的</td>\n<td style=\"text-align: center;\">《<a href=\"http://www.redbook.io/\">Readings in Database Systems</a>》</td>\n<td style=\"text-align: center;\">Joe Hellerstein’s Berkeley CS 186</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">编程语言和编译器</td>\n<td style=\"text-align: center;\">如果你理解语言和编译器是如何运行的，你就能编写更好的代码并轻松学会新的语言</td>\n<td style=\"text-align: center;\">《<a href=\"https://book.douban.com/subject/2970069/\" target=\"_blank\">编译原理 技术与工具</a>》</td>\n<td style=\"text-align: center;\">Alex Aiken’s course on Lagunita</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">分布式系统</td>\n<td style=\"text-align: center;\">近年来，大部分系统已经发展成为分布式系统</td>\n<td style=\"text-align: center;\">Distributed Systems</td>\n<td style=\"text-align: center;\">‍</td>\n</tr>\n</tbody>\n</table>\n<h2>为什么要学习计算机科学</h2>\n<p>有两种软件工程师：一种人对于电脑科学有很好的理解从而去从事挑战性的、富有创造力的工作。另外一种人仅仅熟悉一些高级工具，对其原理持得过且过的态度。</p>\n<p>两者都叫做软件工程师，而且两者在早期的职业生涯中可能领着同样的薪水。但是第一种工程师，不管他从事的是商业工作，还是突破性的开源工程，都会由于他的技术领导力或者杰出的个人贡献一点一点成长成一名对于编程更加痴迷而且待遇更高的工程师。</p>\n<p>第一种工程师可以通过常规手段或者在职业生涯中不断学习来加深对于计算机科学的理解深度。第二种工程师通常停留在表面，学习具体的工具或者技巧而不是其中的基础，当前流行什么技术，他们就仅仅捡起新的技能学习一下。</p>\n<p>近些年来，越来越多的人进入软件领域工作，但是本质上计算机科学的毕业生数量是没有改变的。第二种工程师的供应过量开始导致他们的就业机会变少而且导致他们离企业中令人感觉充实的工作更远。不管你是努力要成为第一种工程师或者仅仅是保险起见地想找到更多的工作，学习计算机科学是唯一一种可靠的途径。</p>\n<h2>课程指南</h2>\n<h3>编程</h3>\n<p>大多数大学的计算机编程课程通常以“入门类”计算机的课程开始。这些课程最好是不仅仅针对于初学者，而且对于第一次学习编程，基本概念和编程模型不是很熟悉的人也有所启发的。</p>\n<p>对于这种介绍的内容的我们给出的标准建议是经典的计算机程序的结构与解释，在网络上能找到很多这样的资料，它们可能是<a href=\"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html\">电子书</a>或者是MIT的一系列讲座<a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/\">视频</a>。这些讲座都很不错，但是我们的视频推荐的实际上是伯克利的一门课程：<a href=\"https://archive.org/details/ucberkeley-webcast-PL3E89002AA9B9879E?sort=titleSorter\">Brian Harvey 的 SICP</a> 讲座 ，这个系列的课程比起MIT的讲座更精炼而且对于入门者更具有针对性。</p>\n<p>我们推荐观看完至少前三章节的SICP（《<a href=\"https://book.douban.com/subject/1148282/\" target=\"_blank\">计算机程序的构造和解释</a> 》）并且做完相应训练。额外地，可以在 <a href=\"http://exercism.io/\">exercism</a> 进行一些编程训练。</p>\n<p><img src=\"https://teachyourselfcs.com/sicp.jpg\" alt=\"image\"></p>\n<p>如果你觉得SICP太难，我们推荐《<a href=\"https://book.douban.com/subject/1140942/\" target=\"_blank\">程序设计方法（中文版）|</a> <em><a href=\"https://book.douban.com/subject/1787103/\">How to Design Programs》</a></em>这本书。如果你觉得它太简单，我们推荐《<em><a href=\"https://smile.amazon.com/Concepts-Techniques-Models-Computer-Programming/dp/0262220695/\">Concepts, Techniques, and Models of Computer Programming</a>》</em> 这本书。</p>\n<h3>计算机体系结构</h3>\n<blockquote><p>硬件是平台 – Mike Acton（Insomniac Games的工程总监） (<a href=\"https://www.youtube.com/watch?v=rX0ItVEVjHc\">收看他在 CPP 大会上的演讲</a>)</p></blockquote>\n<p>计算机结构–有的时候被称为“计算机系统”或者“计算机组织”–是了解程序外表下计算机运行的第一步。根据我们的经验，这是自学软件工程师最容易忽略的地方。</p>\n<p><em><a href=\"https://book.douban.com/subject/1998341/\">《计算机系统要素》</a>（<a href=\"https://book.douban.com/subject/1998645/\">The Elements of Computing Systems</a>）</em>，也被称为“从与非门到俄罗斯方块”。这是一本让你对于计算机中的每一个零件是怎么工作的有一个整体的理解的雄心勃勃的书。每个章节涉及到建立整体系统中一个小的部分，从写基本的逻辑门到HDL，到CPU和汇编语言，一直到完成一个俄罗斯方块应用程序。</p>\n<p><img src=\"https://teachyourselfcs.com/elements-computing-systems.jpg\" alt=\"elements-computing-systems\"></p>\n<p>我们推荐阅读书的前六章节并且完成相关的工程。这会提高你对于计算机结构和运行的软件之间关系的理解。</p>\n<p>这本书的前半部分（和它的全部工程）在 <a href=\"http://www.nand2tetris.org/\">Nand2Tetris </a>网站上可以免费获得。在 <a href=\"https://www.coursera.org/learn/build-a-computer\">Coursera </a>课程网站上你也可以找到它们。</p>\n<p>为了保证课程简单并吸引人，Nand2Tetris 舍弃了深度。特别是现代计算机结构中两个很重要的概念：流水线(pipelining)和内存层级(memory hierarchy)，在书中都没有提及。</p>\n<p>当你觉得看Nand2Tetris已经很简单了，我们下一个建议是Patterson和Hennessy合著的<a href=\"https://book.douban.com/subject/2110638/\">《计算机组成与设计硬件/软件接口》</a>（<em><a href=\"https://book.douban.com/subject/1468468/\">Computer Organization and Design</a>）</em>——一本杰出的现代经典书籍。不是书中所有的部分都很重要；我们建议跟随<a href=\"http://inst.eecs.berkeley.edu/~cs61c/sp15/\">Berkeley的CS61C 课程</a>——（<a href=\"https://book.douban.com/subject/2709133/\">Great Ideas in Computer Architecture</a>），作为特殊读物。讲座的笔记和实验环境都是在线的，而且可以在<a href=\"https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iCl2-D-FS5mk0jFF6cYSJs_\">在这个归档链接</a>回看讲座。</p>\n<h3>算法和数据结构</h3>\n<blockquote><p>只有一个方法是我一直以来广泛推荐的—编码前首先要思考 — Richard Hamming</p></blockquote>\n<p>我们根据几十年的通识来看，熟悉通用的算法和数据结构是计算机科学教育中最重要的方面之一。这是一个训练一个人解决问题的通用能力的方式，而且这种能力还可以迁移到其他领域的学习。</p>\n<p>这个领域有很多优秀的书籍，但是我们最喜欢的是Steven Skiena的<a href=\"https://book.douban.com/subject/4048566/\" target=\"_blank\">《算法设计手册》</a>（<em><a href=\"https://smile.amazon.com/Algorithm-Design-Manual-Steven-Skiena/dp/1848000693/\">The Algorithm Design Manual</a>）</em> 。他显然喜欢这东西而且也迫不及待地想帮助你学习数据结构和算法。这是令人耳目一新的变化，我们认为这本书相对于被更多人所推荐的Cormen, Leiserson, Rivest &amp; Stein 或者 Sedgewick 的书来说更好。后两本书有些太过于引经据典，对于想通过阅读来解决问题的人来说并不是一个好的选择。</p>\n<p><img src=\"https://teachyourselfcs.com/skiena.jpg\" alt=\"skiena\"></p>\n<p>对于那些更喜欢讲座视频的人来说，我们推荐Skiena的<a href=\"http://www3.cs.stonybrook.edu/~algorith/video-lectures/\">讲座</a>. 我们也喜欢Tim Roughgarden的课程，在斯坦福的MOOC平台或者<a href=\"https://www.coursera.org/specializations/algorithms\">Coursera</a>上面可以获得。你喜欢 Skiena 还是 Roughgarden 的讲课风格就是你的个人喜好问题了。</p>\n<p>说到练习，我们倾向于让学生在Leetcode上面解决问题。LeetCode上面的问题都比较有趣而且有答案和讨论。这上面还可以通过解决各大软件公司广泛应用的技术问题来帮助你测试你的进步。我们建议解决你学习的时候解决大约随机100道LeetCode上面的问题。</p>\n<p>最后，我们强烈推荐《怎样解题》这本书，它针对如何解题进行了精彩绝伦和独特的讲解，既适用于数学也适用于电脑科学。</p>\n<p><img src=\"https://teachyourselfcs.com/polya.jpg\" alt=\"polya\"></p>\n<h3>计算机科学领域的数学</h3>\n<blockquote><p>如果人们不认为数学是简单的，那么他们一定没有体会过人生的艰难 — John von Neumann</p></blockquote>\n<p>在某些方面，计算机科学是应用数学的一个扩展。虽然许多软件工程师忽略了这一点，我们建议你去学习它。好好学习数学会给你比那些不学习它们的人巨大的竞争优势。</p>\n<p>和CS最相关的数学领域是“离散数学”，离散是连续对立面。是微积分之外的一系列的有趣的应用数学的主题。从大体上说，尝试学会全部范围的“离散数学”是没有意义的。更现实一点的做法是对于逻辑学，组合学和概率学，集合论，图论和一些数论告知密码学有一个了解。对于计算机图像学和机器学习来说，线性代数也是一门值得学习的课程。</p>\n<p>我们建议从László Lovász的<a href=\"http://www.cs.elte.hu/~lovasz/dmbook.ps\">讲座</a>学起. 这一系列开始学习离散数学。Lovász 教授让学习的内容变得直观生动，比起拘谨的文字，这更利于你学习。</p>\n<p>接下来，我们推荐《<a href=\"https://courses.csail.mit.edu/6.042/spring17/mcs.pdf\">Mathematics for Computer Science</a>》, 它是MIT同名课程的讲义。<a href=\"https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-042j-mathematics-for-computer-science-fall-2010/video-lectures/\">讲座课程</a>的视频也是免费的，而且是我们推荐的离散数学的视频课程。</p>\n<p>线性代数，我们建议从 <a href=\"https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab\">Essence of linear algebra</a> 系列开始学习，接着是Gilbert Strang的<a href=\"https://www.amazon.com/Introduction-Linear-Algebra-Gilbert-Strang/dp/0980232775/\">书籍</a>和<a href=\"https://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/video-lectures/\">视频</a>。</p>\n<h3>操作系统</h3>\n<p><a href=\"https://book.douban.com/subject/2109679/\" target=\"_blank\">《操作系统概念》</a>（<em><a href=\"https://www.amazon.com/dp/1118063333/\">Operating System Concepts</a></em>）（恐龙书）和<a href=\"https://book.douban.com/subject/3852290/\">《现代操作系统》</a>（<em><a href=\"https://www.amazon.com/dp/013359162X/\">Modern Operating Systems</a></em> ）是经典的操作系统的书籍。这两本书的写作方式都饱受争议，而且为了鼓励你去购买新版，这些长达1000页的书每几年就会添加一些内容。</p>\n<p>《<a href=\"http://pages.cs.wisc.edu/~remzi/OSTEP/\">Operating Systems: Three Easy Pieces</a>》这本书是一本比较好的可供选择的线上免费读物。我们特别喜欢书的结构和它经典的练习题。</p>\n<p><img src=\"https://teachyourselfcs.com/ostep.jpeg\" alt=\"ostep\"></p>\n<p>读完这本书，我们推荐你去探索一种特定的操作系统的设计方式，比如那些书名中有系统名字的书籍，比如 《<a href=\"https://www.amazon.com/Lions-Commentary-Unix-John/dp/1573980137/\">Lion‘s commentary on Unix》</a>、《<a href=\"https://www.amazon.com/Design-Implementation-FreeBSD-Operating-System/dp/0321968972/\">The Design and Implementation of the FreeBSD Operating System</a>》，还有 <a href=\"https://www.amazon.com/Mac-OS-Internals-Systems-Approach/dp/0321278542/\">Mac OS X Internals</a>.</p>\n<p>巩固你对于操作系统的理解很好的方式是去读一个小的内核并且添加功能。xv6 是一个不错的选择，它是 Unix V6 和 ANSI C 和 X86 的接口，MIT专门有一门课程就是讲这个的。OSTEP（之前提到的）这本书有一个 XV6 的实验附录，里面都是充满潜力项目的好点子。</p>\n<h3>计算机网络</h3>\n<blockquote><p>你不能够通过凝视水晶球来预见未来。因特网未来会变成什么样，取决于如今人类如何去塑造它 — Bob Kahn</p></blockquote>\n<p>考虑到很多软件项目都是基于web服务器和客户端的，计算机网络变成计算机科学中一门有实用价值的学科。系统学习过该课程的自学学生发现他们终于理解了围绕了伴随它们很多年的术语，概念，协议等等。</p>\n<p>关于这个主题我们最推荐的书是：<a href=\"https://book.douban.com/subject/1391207/\" target=\"_blank\">《计算机网络》</a>（<em><a href=\"https://smile.amazon.com/Computer-Networking-Top-Down-Approach-7th/dp/0133594149/\">Computer Networking: A Top-Down Approach</a></em>）。书中的小工程和实验都很好，值得一做。我们非常喜欢它们提供的 <a href=\"http://www-net.cs.umass.edu/wireshark-labs/\">Wireshark labs</a>。</p>\n<p><img src=\"https://teachyourselfcs.com/top-down.jpg\" alt=\"\"></p>\n<p>对于那些喜欢视频课程的人，我们推荐斯坦福MOOC平台上的《<a href=\"https://lagunita.stanford.edu/courses/Engineering/Networking-SP/SelfPaced/about\">Introduction to Computer Networking course</a>》。</p>\n<p>学习网络的好处不仅仅在于做小的实验而且对于工程来说也有很大的好处。可能涉及到的有：一个HTTP的服务器，一个UDP协议的聊天软件，一个<a href=\"http://jvns.ca/blog/2014/08/12/what-happens-if-you-write-a-tcp-stack-in-python/\">迷你的 TCP 协议栈</a>，一个代理或者负载平衡器，还有分布式的哈希表等等。</p>\n<h3>数据库</h3>\n<p>对于自学者来说，学习数据库系统会比学习其他花费更多的时间。这是一个相对较新的（即1970年代后期）的研究领域。比起写书，许多潜在的杰出教科书作者更愿意去加入或者创办一家公司。</p>\n<p>在这种情况下，我们建议自学者放弃教科书而去学习伯克利的Joe Hellerstein的<a href=\"https://archive.org/details/UCBerkeley_Course_Computer_Science_186\">数据库课程</a>，看完课程再去阅读论文。</p>\n<p>对于初学者有一篇论文比较推荐的是：《<a href=\"http://db.cs.berkeley.edu/papers/fntdb07-architecture.pdf\">Architecture of a Database System》</a>，它高屋建瓴地讲解了关系数据库管理系统是如果工作的这一问题。它会为你未来的学习提供一个有用的纲要。</p>\n<p><em>《<a href=\"http://www.redbook.io/\">Readings in Database Systems</a>》</em>这本书，又被称为数据库红皮书、是一本Peter Bailis、Joe Hellerstein和Michael Stonebraker编辑地论文集。对于那些理解了CS 186内容的人来说，红皮书是你的不二之选。</p>\n<p><img src=\"https://teachyourselfcs.com/redbook.jpg\" alt=\"\"></p>\n<p>如果你坚持要使用一本引导性的教科书，我们推荐Ramakrishnan 和Gehrke的<a href=\"https://book.douban.com/subject/1127950/\" target=\"_blank\">《数据库管理系统》</a>（<em><a href=\"https://smile.amazon.com/Database-Management-Systems-Raghu-Ramakrishnan/dp/0072465638/\">Database Management Systems</a>）</em>，对于更优秀的学生，Jim Gray的传统课程《<em><a href=\"https://www.amazon.com/Transaction-Processing-Concepts-Techniques-Management/dp/1558601902\">Transaction Processing: Concepts and Techniques</a>》</em>值得一看，但是我们不建议把它当成入门书。</p>\n<p>不编大量的代码是不能很好的巩固数据库的理论的，CS 186的学生往Spark中添加功能，这是一个很有意义的工程。但是我们建议仅仅是从头写一个简单的关系数据库管理系统。功能可能不是很丰富，但是即使每一个部分都涉及到一些基本功能也很有启发性。</p>\n<p>最后，数据模型是一个数据库使用中被忽略和没有被重点学习的方面。我们对于这个课题建议的书籍是：《<em><a href=\"https://www.amazon.com/Data-Reality-Perspective-Perceiving-Information/dp/1935504215\">Data and Reality: A Timeless Perspective on Perceiving and Managing Information in Our Imprecise World</a>》</em></p>\n<p><img src=\"https://teachyourselfcs.com/data-reality.jpg\" alt=\"\"></p>\n<h3>语言和编译器</h3>\n<blockquote><p>Don’t be a boilerplate programmer. Instead, build tools for users and other programmers. Take historical note of textile and steel industries: do you want to build machines and tools, or do you want to operate those machines? — Ras Bodik at the start of his compilers course</p></blockquote>\n<p>大部分程序员学习如何使用一门编程语言，然而大部分的计算机科学家则学习这门语言本身。这给了计算机科学家比起程序员很明显的优势。他们的知识能够更好的泛化，他们能比简简单单地掌握一门语言的更加深入和快速的理解一门新语言的操作。</p>\n<p>经典的教科书<a href=\"https://book.douban.com/subject/2970069/\" target=\"_blank\">《编译原理 技术与工具》</a>（ <em><a href=\"https://smile.amazon.com/Compilers-Principles-Techniques-Tools-2nd/dp/0321486811\">Compilers: Principles, Techniques &amp; Tools</a></em>）通常又被称为“龙书”。不幸的是，这本书并不适合自学者，它比较适合教师从中选出1-2个章节并在课堂上讲授。这本书是有必要看的，你可以挑选里面的主题，最好再有个师傅指导你。</p>\n<p><img src=\"https://teachyourselfcs.com/dragon.jpg\" alt=\"\"></p>\n<p>如果你选择在自学中使用龙书，我们推荐你一系列门视频讲座，然后再沉浸在对于龙书的研究中。我们推荐的在线课程是：Alex Aiken 的<a href=\"https://lagunita.stanford.edu/courses/Engineering/Compilers/Fall2014/about\">讲座</a>，你可以在斯坦福大学的幕课平台上观看。</p>\n<p>也有可以替代龙书的教材：Terence Parr写的<a href=\"https://book.douban.com/subject/10482195/\" target=\"_blank\">《编程语言实现模式》</a>（<em><a href=\"https://smile.amazon.com/Language-Implementation-Patterns-Domain-Specific-Programming/dp/193435645X/\">Language Implementation Patterns</a>）</em>，它更适合那些工作中使用类似特定领域语言的小众语言的有经验的编程者，它显得更加实用。当然，为了达到这个目的它也删去了一些有价值的理论。</p>\n<p><img src=\"https://teachyourselfcs.com/parr.jpg\" alt=\"\"></p>\n<p>对于工程实践，我们推荐你写一个编译器，你可以选择像COOL这种简单的教学语言或者你感兴趣的一门语言。如果你觉得太难，你可以参考<a href=\"https://github.com/kanaka/mal\">Make a Lisp</a>,你可以参考它作为开始。</p>\n<h3>分布式系统</h3>\n<p>计算机的数量增长了，它们的分布也更广了。企业之前会购买越来越大型的主机，但是现在大家更倾向于在很多机器上分布式的运行多个小型的应用程序。分布式系统研究的就是这样的技术，这一技术变得越来越重要了。</p>\n<p>我们建议的自学教科书是 Maarten van Steen 和 Andrew Tanenbaum 的《<em><a href=\"https://www.distributed-systems.net/index.php/books/distributed-systems-3rd-edition-2017/\">Distributed Systems, 3rd Edition</a>》。</em> 针对于之前的版本做了很大的改进，而且作者慷慨地把书放在了网上共享。由于分布式计算是一门变化很快的领域，所以没有教科书可以很好的涵盖所有的内容。但是Maarten van Steen的书是我们读过的所有书中最好的书。</p>\n<p><img src=\"https://teachyourselfcs.com/distsys.png\" alt=\"\"></p>\n<p>研究生在线课程 <a href=\"https://www.youtube.com/watch?v=hBWfjkGKRas&amp;list=PLkcQbKbegkMqiWf7nF8apfMRL4P4sw8UL\">MIT’s 6.824</a> 也是一个不错的选择，但可惜视频中的音质不太好，而且不清楚这些视频是不是都被授权过。</p>\n<p>尽管有参考书或者其它的资源，但学习分布式系统是绝对要读论文的。链接中有一个很好的<a href=\"http://dsrg.pdos.csail.mit.edu/papers/\">清单</a>，而且我们十分推荐你从<a href=\"http://paperswelove.org/\">Papers We Love</a> 上面下载论文到本地学习。</p>\n<p> </p>\n<p>译注：本文提到的大部分书籍，中英文版已归档至该<a href=\"https://www.douban.com/doulist/111253184/\">豆列</a></p>\n\r\n        \r\n        \r\n        \n    <div class=\"post-adds\">\n        <span data-post-id=\"114573\" class=\" btn-bluet-bigger href-style vote-post-up   register-user-only \"><i class=\"fa  fa-thumbs-o-up\"></i> <h10 id=\"114573votetotal\">2</h10> 赞</span>\n        <span data-book-type=\"1\" data-site-id=\"2\" data-item-id=\"114573\" data-item-type=\"1\" class=\" btn-bluet-bigger href-style bookmark-btn  register-user-only \"><i class=\"fa fa-bookmark-o  \"></i> 14 收藏</span>\n\n                    <a href=\"#article-comment\"><span class=\"btn-bluet-bigger href-style hide-on-480\"><i class=\"fa fa-comments-o\"></i> 1 评论</span></a>\n        \n        \n        \n        <!-- JiaThis Button BEGIN -->\n        <div class=\"jiathis_style_24x24\" style=\"display: inline-flex; position: relative; margin: 0; clear: both;float: right;\">\n            <a class=\"jiathis_button_tsina\"></a>\n            <a class=\"jiathis_button_weixin\"></a>\n            <a class=\"jiathis_button_qzone\"></a>\n            <a class=\"jiathis_button_fb hide-on-480\"></a>\n            <a href=\"http://www.jiathis.com/share?uid=1745061\" class=\"jiathis jiathis_txt jiathis_separator jtico jtico_jiathis\" target=\"_blank\"></a>\n        </div>\n\n    </div>\n\n\n\n\r\n        <!-- BEGIN #author-bio -->\r\n\r\n<div id=\"author-bio\">\r\n\t\r\n\t<h3 class=\"widget-title\">\r\n\t关于作者：<a target=\"_blank\" href=\"http://www.jobbole.com/members/pumpkin0227\">pumpkin0227</a>\r\n\t</h3>\r\n\t<div class=\"alignleft\">\r\n\t\t<a target=\"_blank\" href=\"http://www.jobbole.com/members/pumpkin0227\">\r\n\t\t\t<img src=\"http://jbcdn2.b0.upaiyun.com/2015/04/8fbdaaa5ea6d3b49c8c1c825aafeb5d9.png\">\r\n\t\t</a>\r\n\t</div>\r\n\r\n    <div class=\"author-bio-info\">\r\n\r\n        <span class=\"author-bio-info-block\">\r\n            简介还没来得及写 :）        </span>\r\n        <span class=\"author-bio-info-block\">\r\n            <a href=\"http://www.jobbole.com/members/pumpkin0227\" target=\"_blank\"><i class=\"fa fa-user\"></i> 个人主页</a> ·\r\n            <a href=\"http://blog.jobbole.com/author/pumpkin0227/\" target=\"_blank\"><i class=\"fa fa-file-text-o\"></i> 我的文章</a>\r\n\r\n             · <a title=\"声望值\" target=\"_blank\" href=\"http://www.jobbole.com/members/pumpkin0227/reputation/\"><i class=\"fa fa-graduation-cap\"></i> 1</a>        </span>\r\n    </div>\r\n\t<div class=\"clear\"></div>\r\n</div>\r\n\r\n<!-- END #author-bio -->\r\n\t</div>", "front_image_path": "full/accb54975d2bc4027f48b9868ceac82647ca76fe.jpg"}
